/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sigi;

import Connection.Conexion;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.util.List;
import java.util.ArrayList;



import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.stage.FileChooser;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import jxl.Cell;
import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;
import static sigi.moduloVenta.j;
/**
 *
 * @author Gustavo
 */
public class stock extends javax.swing.JInternalFrame {

    Conexion con,query;
    ResultSet rs;
    ResultSet rs2;
    ResultSet rs3;
    private int limite = 4;
    static int j=0,w=0,jj=0; 
    static String aux3;
    static float total=0;
    static String inv[]=new String[50000];
    static float invT=0;
   public static String id,cad,id_nota,existe,ID;
   String hora,minutos,segundos,ampm;
    Calendar calendario;    
 //   public static int rowCount, numfac;
    
    public static int rowCount, numfac, rs1,id1;
public static boolean estado;

 private static DefaultTableModel modelo;

//para exportar
    private JFileChooser FileChooser = new JFileChooser();
    private Vector columna = new Vector();
    private Vector filas = new Vector();
    private static int tabla_ancho = 0;
    private static int tabla_alto = 0;
    
    public stock() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTmostrar = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jFstockact = new javax.swing.JFormattedTextField();
        jFagregarstock = new javax.swing.JFormattedTextField();
        jFajuste = new javax.swing.JFormattedTextField();
        jTajuste = new javax.swing.JTextField();
        jBagregar = new javax.swing.JButton();
        jBajuste = new javax.swing.JButton();
        exportAll = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jFscaning = new javax.swing.JFormattedTextField();
        jLabel9 = new javax.swing.JLabel();
        jFstockmin = new javax.swing.JFormattedTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jBmodstockmin = new javax.swing.JButton();
        jBmostrar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTnombre = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        exportAllTable = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Microsoft JhengHei", 1, 14)); // NOI18N
        jLabel1.setText("Codigo de producto");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 13, -1, -1));

        jLabel2.setFont(new java.awt.Font("Microsoft JhengHei", 1, 14)); // NOI18N
        jLabel2.setText("Nombre");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 65, -1, -1));

        jTmostrar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTmostrar);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(26, 379, 770, 210));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel1.setAutoscrolls(true);
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jFstockact.setEditable(false);
        jFstockact.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter()));
        jFstockact.setToolTipText("");
        jFstockact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFstockactActionPerformed(evt);
            }
        });
        jPanel1.add(jFstockact, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 94, -1));
        jPanel1.add(jFagregarstock, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 94, -1));
        jPanel1.add(jFajuste, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, 96, -1));

        jTajuste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTajusteActionPerformed(evt);
            }
        });
        jPanel1.add(jTajuste, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 270, 320, -1));

        jBagregar.setText("Agregar");
        jBagregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBagregarActionPerformed(evt);
            }
        });
        jPanel1.add(jBagregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 210, 80, -1));

        jBajuste.setText("Ajuste");
        jBajuste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBajusteActionPerformed(evt);
            }
        });
        jPanel1.add(jBajuste, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 270, 80, -1));

        exportAll.setText("Exportar Stock completo");
        exportAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportAllActionPerformed(evt);
            }
        });
        jPanel1.add(exportAll, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 300, 170, 30));

        jButton5.setText("Importar Stock completo");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 300, 180, 30));

        jFscaning.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFscaningActionPerformed(evt);
            }
        });
        jFscaning.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFscaningKeyPressed(evt);
            }
        });
        jPanel1.add(jFscaning, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 38, 380, -1));

        jLabel9.setFont(new java.awt.Font("Microsoft JhengHei", 1, 14)); // NOI18N
        jLabel9.setText("Stock Minimo");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(152, 119, -1, -1));
        jPanel1.add(jFstockmin, new org.netbeans.lib.awtextra.AbsoluteConstraints(152, 146, 101, -1));

        jLabel6.setFont(new java.awt.Font("Microsoft JhengHei", 1, 14)); // NOI18N
        jLabel6.setText("Descripci√≥n ajuste");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 240, -1, -1));

        jLabel8.setFont(new java.awt.Font("Microsoft JhengHei", 1, 14)); // NOI18N
        jLabel8.setText("Ajuste");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, -1, -1));

        jBmodstockmin.setText("Modificar");
        jBmodstockmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBmodstockminActionPerformed(evt);
            }
        });
        jPanel1.add(jBmodstockmin, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 140, 90, 30));

        jBmostrar.setText("Mostrar");
        jBmostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBmostrarActionPerformed(evt);
            }
        });
        jPanel1.add(jBmostrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 350, 90, -1));

        jButton1.setFont(new java.awt.Font("Microsoft JhengHei", 1, 18)); // NOI18N
        jButton1.setText("A XLS");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 340, -1, -1));

        jButton2.setFont(new java.awt.Font("Microsoft JhengHei", 1, 18)); // NOI18N
        jButton2.setText("DE XLS");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 340, -1, -1));

        jLabel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Articulos con stock menor a stock minimo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Microsoft JhengHei", 1, 14))); // NOI18N
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 800, 270));

        jLabel3.setFont(new java.awt.Font("Microsoft JhengHei", 1, 14)); // NOI18N
        jLabel3.setText("Stock actual");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, -1));

        jTnombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTnombreActionPerformed(evt);
            }
        });
        jPanel1.add(jTnombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 88, 380, 20));

        jLabel4.setFont(new java.awt.Font("Microsoft JhengHei", 1, 14)); // NOI18N
        jLabel4.setText("Agregar stock");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 820, 610));

        exportAllTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(exportAllTable);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 50, 120, 100));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTnombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTnombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTnombreActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        FileChooser.showDialog(null, "Importar Hoja ");
        File file = FileChooser.getSelectedFile();
        if (!file.getName().endsWith("xls")) {
            JOptionPane.showMessageDialog(null, "Seleccione un archivo excel...", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                CrearTabla(file);
            } catch (IOException ex) {
                Logger.getLogger(proveedores.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        if(jTmostrar.getColumnCount() <= 0) {
            JOptionPane.showMessageDialog(null, "No hay tabla para exportar, se debe presionar Mostrar primero y luego exportar");
        } else {
            JFileChooser dialog = new JFileChooser();
            int opcion = dialog.showSaveDialog(stock.this);
            if (opcion == JFileChooser.APPROVE_OPTION) {

                File dir = dialog.getSelectedFile();

                try {
                    List<JTable> tb = new ArrayList<JTable>();
                    tb.add(jTmostrar);
                    //-------------------
                    export_excel excelExporter = new export_excel(tb, new File(dir.getAbsolutePath() + ".xls"));
                    if (excelExporter.export()) {
                        JOptionPane.showMessageDialog(null, "TABLAS EXPORTADOS CON EXITOS!");
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jBmostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBmostrarActionPerformed
        try {
            // se comienza la conexion con la base de datos
            try {
                con = new Conexion();

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ppal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(ppal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                Logger.getLogger(ppal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(ppal.class.getName()).log(Level.SEVERE, null, ex);
            }

            //  String sqlc = " SELECT * FROM `stock` WHERE `saldo_stock` <= `stock_min`";
            String sqlc =  "SELECT descripcion_articulos.scanning, descripcion_articulos.nombre_producto, descripcion_articulos.precio_costo,  stock.stock_min, stock.saldo_stock, descripcion_articulos.id_articulo FROM descripcion_articulos INNER JOIN stock ON stock.id_articulo = descripcion_articulos.id_articulo WHERE `saldo_stock` <= `stock_min`";
            rs = con.Consulta(sqlc);

            //ID = rs.getString(1);
            //existe = rs.getString(2);

            // System.out.println("despues");
            /* while(rs.next()){
                ID = rs.getString(1);
                existe = rs.getString(2);

            }*/
            DefaultTableModel buscar = new DefaultTableModel(){
                @Override
                public boolean isCellEditable(int rowIndex, int vColIndex) {
                    return false;
                }};
                this.jTmostrar.setModel(buscar);
                buscar.addColumn("ID Articulos");
                buscar.addColumn("Scaning");
                buscar.addColumn("Nombre Producto");
                buscar.addColumn("Costo");
                buscar.addColumn("cantidad");
                buscar.addColumn("Stock minimo");
                //Obteniendo la informacion de las columnas que estan siendo consultadas
                /*  ResultSetMetaData rsMd = rs.getMetaData();
                //La cantidad de columnas que tiene la consulta
                int cantidadColumnas = rsMd.getColumnCount();
                //Establecer como cabezeras el nombre de las colimnas
                for (int i = 1; i <= cantidadColumnas; i++) {
                    buscar.addColumn(rsMd.getColumnLabel(i));
                }
                */

                int y=0;
                while(rs.next()){

                    Object[] fila = new Object[6];
                    fila[0] = rs.getInt("id_articulo");
                    fila[1] = rs.getString("scanning");
                    fila[2] = rs.getString("nombre_producto");
                    fila[3] = rs.getInt("precio_costo");
                    fila[4] = rs.getInt("saldo_stock");
                    fila[5] = rs.getInt("stock_min");

                    //for (int i = 0; i < 3; i++) {
                        //int i = 0;
                        //                            fila[i]=rs.getObject(i+1);
                        //Object[] fila = new Object[3];//Creamos un Objeto con tantos par√°metros como datos retorne cada fila
                        // de la consulta
                        //Lo que hay entre comillas son los campos de la base de datos

                        /*  String ID1 = rs.getString("id_articulo");
                        String sqla = " SELECT * FROM `articulos` WHERE `id_articulo` = "+ID1+"";

                        rs2 = con.Consulta(sqla);

                        while(rs2.next()){

                        }*/buscar.addRow(fila);
                        // A√±ade una fila al final del modelo de la tabla
                        //}
                    //buscar.addRow(fila);
                    //   for(int l=0;l<7;l++)
                    // buscar.isCellEditable(y, l);
                    // y++;
                    // jTmostrar.updateUI();
                }

            } catch (SQLException ex) {
                Logger.getLogger(ppal.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_jBmostrarActionPerformed

    private void jBmodstockminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBmodstockminActionPerformed
        try {
            // se comienza la conexion con la base de datos
            try {
                con = new Conexion();

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ppal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(ppal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                Logger.getLogger(ppal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(ppal.class.getName()).log(Level.SEVERE, null, ex);
            }

            //se obtienen los valores de los jTextField
            String stockmin = jFstockmin.getText();
            //sentencias sql para insertar los datos en la base de datos
            String sql3 = "UPDATE `stock` SET `stock_min`='"+stockmin+"' WHERE id_articulo LIKE '"+id+"'";
            //en mysql ///// UPDATE `stock` SET `stock_min`=8 WHERE id_articulo LIKE 15
            //funcion para ejecutar la query
            con.ejecutar(sql3);

            JOptionPane.showMessageDialog(null, "Stock minimo= "+jFstockmin.getText()+".");

            borrarCampos();

        } catch (SQLException ex) {
            Logger.getLogger(ppal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBmodstockminActionPerformed

    private void jFscaningKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFscaningKeyPressed
        /* jTnombre.setText("");
        jFstockact.setText("");
        jFstockmin.setText("");
        jFagregarstock.setText("");
        jFajuste.setText("");
        jTajuste.setText("");*/
        try {
            // se comienza la conexion con la base de datos
            try {
                con = new Conexion();

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(moduloVenta.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(moduloVenta.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                Logger.getLogger(moduloVenta.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(moduloVenta.class.getName()).log(Level.SEVERE, null, ex);
            }

            String scanning = jFscaning.getText();
            String findArticulo ="SELECT * FROM descripcion_articulos, stock WHERE scanning LIKE '"+scanning+"%' AND stock.id_articulo = descripcion_articulos.id_articulo";

            rs = con.Consulta(findArticulo);

            if(rs==null)
            JOptionPane.showMessageDialog(null, "No se encontro el scaning: "+jFscaning.getText()+" en la base de datos.");
            while(rs.next()){
                jTnombre.setText(rs.getString("nombre_producto"));
                jFstockact.setText(rs.getString("saldo_stock"));
                id=(rs.getString("id_articulo"));
                if(rs.getString("stock_min") != "NULL") {
                    jFstockmin.setText(rs.getString("stock_min"));
                }
            }

        } catch (SQLException ex) {
            Logger.getLogger(moduloVenta.class.getName()).log(Level.SEVERE, null, ex);
        }

        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            try {
                // se comienza la conexion con la base de datos
                try {
                    con = new Conexion();

                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(moduloVenta.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(moduloVenta.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(moduloVenta.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(moduloVenta.class.getName()).log(Level.SEVERE, null, ex);
                }
                String sql1 ="SELECT * FROM stock WHERE id_articulo LIKE '"+id+"'";

                rs2 = con.Consulta(sql1);
                while (rs2.next()) {
                    jFstockmin.setText(rs2.getString("stock_min"));
                    jFstockact.setText(rs2.getString("saldo_stock"));
                }
            } catch (SQLException ex) {
                Logger.getLogger(moduloVenta.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jFscaningKeyPressed

    private void jFscaningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFscaningActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFscaningActionPerformed

    private void jBajusteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBajusteActionPerformed
        try {
            // se comienza la conexion con la base de datos
            try {
                con = new Conexion();

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ppal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(ppal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                Logger.getLogger(ppal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(ppal.class.getName()).log(Level.SEVERE, null, ex);
            }
            String sqlc = "SELECT * FROM stock WHERE id_articulo = '"+id+"'";
            // System.out.println("antes");
            rs = con.Consulta(sqlc);
            // System.out.println("despues");
            while(rs.next()){
                ID = rs.getString(1);
                existe = rs.getString(2);
            }
            int e = Integer.parseInt(existe);
            // Float k = Float.parseFloat(ex[i]);
            String valorAjuste = jFajuste.getText();
            int valorAjusteString = Integer.parseInt(valorAjuste);
            int total = e - valorAjusteString;
            String ajuste = jTajuste.getText();
            String modifica = "UPDATE `stock` SET `saldo_stock` = "+total+", `salida` = "+valorAjuste+", `descrip_ajuste` = '"+ajuste+"' WHERE `id_articulo` ="+id+"";
            con.ejecutar(modifica);

            JOptionPane.showMessageDialog(null, "Ajuste realizado.");

            borrarCampos();

        } catch (SQLException ex) {
            Logger.getLogger(ppal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBajusteActionPerformed

    private void jBagregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBagregarActionPerformed

        try {
            // se comienza la conexion con la base de datos
            try {
                con = new Conexion();

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ppal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(ppal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                Logger.getLogger(ppal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(ppal.class.getName()).log(Level.SEVERE, null, ex);
            }
            String sqlc = "SELECT * FROM stock WHERE id_articulo = '"+id+"'";
            // System.out.println("antes");
            rs = con.Consulta(sqlc);
            // System.out.println("despues");
            while(rs.next()){
                ID = rs.getString(1);
                existe = rs.getString(2);

            }

            int e = Integer.parseInt(existe);
            // Float k = Float.parseFloat(ex[i]);
            String sum = jFagregarstock.getText();
            int sum1 = Integer.parseInt(sum);
            int t = e + sum1;
            String modifica = "UPDATE  `stock` SET  `saldo_stock` = "+t+", `incremento` = "+sum+" WHERE `id_articulo` ="+id+"";
            con.ejecutar(modifica);

            JOptionPane.showMessageDialog(null, "Stock modificado.");

            borrarCampos();

        } catch (SQLException ex) {
            Logger.getLogger(ppal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBagregarActionPerformed

    private void jFstockactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFstockactActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFstockactActionPerformed

    private void jTajusteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTajusteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTajusteActionPerformed

    private void exportAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportAllActionPerformed
        try {
            // se comienza la conexion con la base de datos
            try {
                con = new Conexion();

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(stock.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(stock.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                Logger.getLogger(stock.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                Logger.getLogger(stock.class.getName()).log(Level.SEVERE, null, ex);
            }
            String sqlc = "SELECT t1.id_articulo, t1.scanning, "
                    + "t1.nombre_producto, t1.precio_costo, "
                    + "t2.saldo_stock, t2.stock_min "
                    + "FROM descripcion_articulos AS t1 INNER JOIN stock AS t2 "
                    + "WHERE t1.stock_id_stock = t2.id_stock";
            rs = con.Consulta(sqlc);
            
            DefaultTableModel buscar = new DefaultTableModel(){
                @Override
                public boolean isCellEditable(int rowIndex, int vColIndex) {
                    return false;
                }};
                this.exportAllTable.setModel(buscar);
                buscar.addColumn("ID Articulos");
                buscar.addColumn("Scaning");
                buscar.addColumn("Nombre Producto");
                buscar.addColumn("Costo");
                buscar.addColumn("cantidad");
                buscar.addColumn("Stock minimo");
                int y=0;
                while(rs.next()){

                    Object[] fila = new Object[6];
                    fila[0] = rs.getInt("id_articulo");
                    fila[1] = rs.getString("scanning");
                    fila[2] = rs.getString("nombre_producto");
                    fila[3] = rs.getInt("precio_costo");
                    fila[4] = rs.getInt("saldo_stock");
                    fila[5] = rs.getInt("stock_min");
                    buscar.addRow(fila);
                }
                
		
		// stuff it in a scrollpane with a controlled size.
		JScrollPane scrollPane = new JScrollPane(exportAllTable);		
		scrollPane.setPreferredSize(new Dimension(350, 150));
		
		// pass the scrollpane to the joptionpane.				
		JOptionPane.showMessageDialog(null, scrollPane, "Datos a exportar", JOptionPane.PLAIN_MESSAGE);
        } catch (SQLException ex) {
            Logger.getLogger(ppal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        JFileChooser dialog = new JFileChooser();
        int opcion = dialog.showSaveDialog(stock.this);

        if (opcion == JFileChooser.APPROVE_OPTION) {

            File dir = dialog.getSelectedFile();

            try {
                List<JTable> tb = new ArrayList<JTable>();
                tb.add(exportAllTable);
                //-------------------
                export_excel excelExporter = new export_excel(tb, new File(dir.getAbsolutePath() + ".xls"));
                if (excelExporter.export()) {
                    JOptionPane.showMessageDialog(null, "TABLAS EXPORTADOS CON EXITOS!");
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_exportAllActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        FileChooser.showDialog(null, "Importar Hoja ");
        File file = FileChooser.getSelectedFile();
        if (!file.getName().endsWith("xls")) {
            JOptionPane.showMessageDialog(null, "Seleccione un archivo excel...", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                CrearTabla(file);
            } catch (IOException ex) {
                Logger.getLogger(proveedores.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    public void keyTyped(KeyEvent ke) {
        char c=ke.getKeyChar();
        if(Character.isLetter(c)) {
            getToolkit().beep();  
            ke.consume();
            JOptionPane.showMessageDialog(null, "SOLO N√öMEROS");
        }    
    }
    
    public void CrearTabla(File file) throws IOException {
        Workbook workbook = null;
        modelo = new DefaultTableModel();
        modelo.addColumn("ID Articulos");
        modelo.addColumn("Scaning");
        modelo.addColumn("Nombre Producto");
        modelo.addColumn("Costo");
        modelo.addColumn("cantidad");
        modelo.addColumn("Stock minimo");
        this.jTmostrar.setModel(modelo);
        try {
            workbook = Workbook.getWorkbook(file);

            Sheet sheet = workbook.getSheet(0);
            columna.clear();

            for (int i = 0; i < sheet.getColumns(); i++) {
                Cell cell1 = sheet.getCell(i, 0);
                columna.add(cell1.getContents());
            }
            filas.clear();

            for (int j = 1; j < sheet.getRows(); j++) {

                Vector d = new Vector();

                for (int i = 0; i < sheet.getColumns(); i++) {

                    Cell cell = sheet.getCell(i, j);
                    d.add(cell.getContents());
                }
                d.add("\n");
                modelo.addRow(d);
            }
            int ax = JOptionPane.showConfirmDialog(null, "Confirma guardar datos en la base local?");
            if(ax == JOptionPane.YES_OPTION){
                j = jTmostrar.getRowCount();
                String ID = null;
                if (j==0){
                    JOptionPane.showMessageDialog(null, "No hay ningun elemento  en la Tabla de Venta");
                }else{
                    try {
                        try {
                            con = new Conexion();
                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(ppal.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (SQLException ex) {
                            Logger.getLogger(ppal.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (InstantiationException ex) {
                            Logger.getLogger(ppal.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (IllegalAccessException ex) {
                            Logger.getLogger(ppal.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        
                        String pro[] = new String[100],p;
                        int to[] = new int[100];
                        String cant[] = new String[100];
                        Object ex = null;
                        Object pros=null;
                        for (int i=0; i<j; i++) {
                            pros = jTmostrar.getValueAt(i, 0);
                            pro[i] = objectToString(pros);
                            p=objectToString(jTmostrar.getValueAt(i, 4));
                            cant[i]= objectToString(p);
                            ex=  jTmostrar.getValueAt(i, 5);
                            String xe = objectToString(ex);
                            to[i] = Integer.parseInt(xe);
                            String sqlc = "SELECT * FROM stock WHERE id_articulo = '"+pro[i]+"'";
                            rs = con.Consulta(sqlc);
                            while(rs.next()){
                                ID = rs.getString(2);
                            }
                            String modifica = "UPDATE  `stock` SET `saldo_stock` = '"+cant[i]+"', `stock_min` = '"+ex+"' WHERE `id_articulo` ='"+ID+"'";
                            con.ejecutar(modifica);
                        }j=0;
                    } catch (SQLException ex) {
                        Logger.getLogger(ppal.class.getName()).log(Level.SEVERE, null, ex);
                    }
            }  
            JOptionPane.showMessageDialog(null, "Datos guardados");
            }else if(ax == JOptionPane.NO_OPTION)
                JOptionPane.showMessageDialog(null, "Cancelar");
        } catch (BiffException e) {
            e.printStackTrace();
        }
    }
    
    public String objectToString(Object o) {
        String st;
        st = (String) o;
        return st;
    }
    
    public void borrarCampos() {
        jFscaning.setText("");
        jTnombre.setText("");
        jFstockact.setText("");
        jFstockmin.setText("");
        jFagregarstock.setText("");
        jFajuste.setText("");
        jTajuste.setText("");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exportAll;
    private javax.swing.JTable exportAllTable;
    private javax.swing.JButton jBagregar;
    private javax.swing.JButton jBajuste;
    private javax.swing.JButton jBmodstockmin;
    private javax.swing.JButton jBmostrar;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton5;
    private javax.swing.JFormattedTextField jFagregarstock;
    private javax.swing.JFormattedTextField jFajuste;
    private javax.swing.JFormattedTextField jFscaning;
    private javax.swing.JFormattedTextField jFstockact;
    private javax.swing.JFormattedTextField jFstockmin;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTajuste;
    private javax.swing.JTable jTmostrar;
    private javax.swing.JTextField jTnombre;
    // End of variables declaration//GEN-END:variables
}
