
package sigi;

import Connection.Conexion;
import Connection.Conexion_login;
import Utils.ImprimirTicket;
import Utils.Utils;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

public class ABMServicioTecnico extends javax.swing.JInternalFrame {
    Conexion con;
    Conexion_login conUser;
    ResultSet rs;
    String ticket = "";
    String ticketNumber = "";
    int serviceProcess = 0;
    //static float total = 0;
    //static int j = 0, k = 0;
    //static String result = "", ticketNumberFrom = "", ticketNumberTo = "";
    //int idUser = 0, idClosingDay = 0, adjustmentId = 0;
    //String ctaCte = "", discounts = "", totalCanceledTickets = "", returns = "", providersPayment = "", cashWithdrawal = "";
    
    public ABMServicioTecnico() {
        initComponents();
        initValues();
       /*try {
            con = new Conexion();
            String updateOrderNumber = "UPDATE numero_orden_servicio SET numero_orden_servicio = numero_orden_servicio + 1 WHERE id_numero_orden_servicio = 1";
            con.ejecutar(updateOrderNumber);
            String getOrderNumber = "SELECT lpad(numero_orden_servicio, 6, 0) order_number FROM numero_orden_servicio";
            rs = con.Consulta(getOrderNumber);
            while(rs.next()) {
                orderNumber.setText(rs.getString("order_number"));
            }
            String getDeviceType = "SELECT * FROM tipo_articulo";
            rs = con.Consulta(getDeviceType);
            deviceType.insertItemAt("", 0);
            while(rs.next()) {
                deviceType.insertItemAt(rs.getString("descripcion"), rs.getInt("id_tipo_articulo"));
            }
            con.Cerrar();
        } catch (ClassNotFoundException | SQLException | InstantiationException | IllegalAccessException ex) {
            Logger.getLogger(ABMServicioTecnico.class.getName()).log(Level.SEVERE, null, ex);
        }
        inDate.setText(Utils.currentDateFormated());
        customerName.requestFocus();*/
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        customerName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        customerContact = new javax.swing.JTextField();
        deviceType = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        deviceMarc = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        deviceModel = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        inDate = new javax.swing.JTextField();
        saveAndPrint = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        problemDetail = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        orderNumber = new javax.swing.JTextField();
        inProcess = new javax.swing.JCheckBox();
        aproved = new javax.swing.JCheckBox();
        finish = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        searchOrder = new javax.swing.JTextField();
        saveChanges = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        deviceSerialNumber = new javax.swing.JTextField();

        setClosable(true);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel1.setText("Nombre Cliente");

        customerName.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel2.setText("Numero de contacto");

        customerContact.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        deviceType.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel3.setText("Tipo Equipo");

        jLabel4.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel4.setText("Marca");

        deviceMarc.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel5.setText("Modelo");

        deviceModel.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel6.setText("Fecha Ingreso");

        inDate.setEditable(false);
        inDate.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        saveAndPrint.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        saveAndPrint.setText("Imprimir");
        saveAndPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAndPrintActionPerformed(evt);
            }
        });

        cancel.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        cancel.setText("Cancelar");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel8.setText("Descripcion falla");

        problemDetail.setColumns(20);
        problemDetail.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        problemDetail.setRows(5);
        problemDetail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                problemDetailKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(problemDetail);

        jLabel7.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel7.setText("N° Orden");

        orderNumber.setEditable(false);
        orderNumber.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        inProcess.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        inProcess.setSelected(true);
        inProcess.setText("En presupuesto");

        aproved.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        aproved.setText("Aprobado y en reparacion");

        finish.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        finish.setText("Entregado");

        jLabel9.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel9.setText("Buscar Orden");

        searchOrder.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchOrderKeyReleased(evt);
            }
        });

        saveChanges.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        saveChanges.setText("Guardar");
        saveChanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveChangesActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel10.setText("N° Serie");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(inProcess)
                            .addGap(75, 75, 75)
                            .addComponent(aproved)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(finish))
                        .addComponent(jLabel8)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel1)
                                .addComponent(jLabel3)
                                .addComponent(jLabel5)
                                .addComponent(jLabel9)
                                .addComponent(jLabel4))
                            .addGap(30, 30, 30)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(customerName, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel7)
                                    .addGap(26, 26, 26)
                                    .addComponent(orderNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(deviceType, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(customerContact, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(39, 39, 39)
                                    .addComponent(jLabel6)
                                    .addGap(18, 18, 18)
                                    .addComponent(inDate, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(searchOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(deviceSerialNumber, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                                    .addComponent(deviceModel, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(deviceMarc, javax.swing.GroupLayout.Alignment.LEADING))))
                        .addComponent(jScrollPane1)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(25, 25, 25)
                            .addComponent(saveAndPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(130, 130, 130)
                            .addComponent(saveChanges, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(130, 130, 130)
                            .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(228, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(searchOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(customerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel7)
                    .addComponent(orderNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(customerContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(inDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deviceType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deviceMarc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deviceModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(deviceSerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inProcess)
                    .addComponent(aproved)
                    .addComponent(finish))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveAndPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveChanges, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveAndPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAndPrintActionPerformed
        try {
            con = new Conexion();
            if(inProcess.isSelected()) {
                serviceProcess = 1;
            } else if (aproved.isSelected()) {
                serviceProcess = 2;
            } else if (finish.isSelected()) {
                serviceProcess = 3;
            }
            String insertService = "INSERT INTO servicio_tecnico (service_order_number, client_name, contact_number, equipment_type, equipment_marc, equipment_model, admission_date, service_detail, serial_number, service_state) "
                                    + "VALUES ('"+orderNumber.getText()+"', '"+customerName.getText()+"', '"+customerContact.getText()+"', '"+deviceType.getSelectedIndex()+"', '"+deviceMarc.getText()+"', '"+deviceModel.getText()+"', '"+inDate.getText()+"', '"+problemDetail.getText()+"', '"+deviceSerialNumber.getText()+"','"+serviceProcess+"') ";
            con.ejecutar(insertService);
            String salto = System.getProperty("line.separator");
            String ticketHeader = "REMITO RECEPCION EQUIPO"+
                                    salto+"--------------------------------"+
                                    salto+Login.companyName+
                                    salto+Login.companyAddress+" N° "+Login.companyAddressNumber+
                                    salto+Login.companyDepartment+" - "+Login.companyProvince+" - "+Login.companyCp+
                                    salto+"Telefono: "+Login.companyTelephone+ " - "+Login.companyOtherTelephone+
                                    salto+"--------------------------------"+
                                    salto+"Remito Nro: 00001"+//++
                                    salto+"Fecha ingreso: "+Utils.currentDateFormated()+
                                    salto+"--------------------------------"+
                                    salto+"--------------------------------";
            String customerData = salto+"Nombre cliente: "+customerName.getText()+
                                    salto+"Contacto: "+customerContact.getText()+
                                    salto+"--------------------------------";
            String device = salto+"Tipo equipo: "+deviceType.getName()+
                            salto+"Marca: "+deviceMarc.getText()+
                            salto+"Modelo: "+deviceModel.getText()+
                            salto+"Falla: "+problemDetail.getText()+
                            salto+"--------------------------------";
                    //String ticketBody="";
                    /*for (int i=0;i<j;i++){
                        discount[i] = new BigDecimal(tablaCompras.getValueAt(i, 5).toString());
                        if(tipoArticulo[i] != 2){
                            price = precioVenta[i].multiply(cantidadVenta[i]).setScale(2, RoundingMode.CEILING);
                        } else {
                            price = precioVenta[i].multiply(cantidadVenta[i]).divide(new BigDecimal(1000)).setScale(2, RoundingMode.CEILING);
                        }
                        if(discount[i].equals(compareDiscount)) {
                            if(nombreProducto[i].length() > 4 && marcaProducto[i].length() > 4) {
                                ticketBody = ticketBody+salto+cantidadVenta[i]+" x "+precioVenta[i]+
                                salto+scanningArticulo[i]+" "+nombreProducto[i].substring(0, 4)+" "+marcaProducto[i].substring(0, 4)+"\t"+price+""+
                                salto+"...";
                            } else {
                                ticketBody = ticketBody+salto+cantidadVenta[i]+" x "+precioVenta[i]+
                                salto+scanningArticulo[i]+" "+nombreProducto[i]+" "+marcaProducto[i]+"\t"+price+""+
                                salto+"...";
                            }
                        } else {
                            ticketBody = ticketBody+salto+cantidadVenta[i]+" x "+precioVenta[i]+
                                salto+scanningArticulo[i]+" "+nombreProducto[i].substring(0, 4)+" "+marcaProducto[i].substring(0, 4)+"\t"+price+""+
                                salto+"BONIFICACION\t\t-"+discount[i]+
                                salto+"...";
                        }*/
                    //}
                        ticket = ticketHeader+customerData+device;
                        //JOptionPane.showMessageDialog(null, "Venta Realizada"+salto+salto+"Total a Cobrar: $ "+getTotalVentas+salto+"Cambio: $ "+exchange);
                        //cambiar total de estado cuenta
                    //if(Login.printStatus == 1) {
                        //printTicketFont.setText(ticket);
                        //int print = ImprimirTicket.printTicket(ticket);
                      //  if(print == 1) {
                        //    ticket = null;
                       // } else {
                            System.out.println(ticket);
                        //}
                    //}
            con.Cerrar();
        } catch (ClassNotFoundException | SQLException | InstantiationException | IllegalAccessException ex) {
            Logger.getLogger(ABMServicioTecnico.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveAndPrintActionPerformed

    private void problemDetailKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_problemDetailKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            inProcess.requestFocus();
        }
    }//GEN-LAST:event_problemDetailKeyReleased

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cancelActionPerformed

    private void searchOrderKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchOrderKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {
                con = new Conexion();
                //String createOrder = "UPDATE numero_orden_servicio SET numero_orden_servicio = numero_orden_servicio + 1 WHERE id_numero_orden_servicio = 1";
                String createOrder = "SELECT * FROM servicio_tecnico WHERE numero_orden_servicio = '"+searchOrder.getText()+"'";
                rs = con.Consulta(createOrder);
                while(rs.next()) {
                    customerName.setText(rs.getString("client_name"));
                    orderNumber.setText(rs.getString("service_order_number"));
                    customerContact.setText(rs.getString("contact_number"));
                    inDate.setText(Utils.formatDate(rs.getDate("admission_date")));
                    deviceType.setSelectedIndex(rs.getInt("equipment_type"));
                    deviceMarc.setText(rs.getString("equipment_marc"));
                    deviceModel.setText(rs.getString("equipment_model"));
                    deviceSerialNumber.setText(rs.getString("serial_number"));
                    problemDetail.setText(rs.getString("service_detail"));
                    switch (rs.getInt("service_state")) {
                        case 1:
                            inProcess.setSelected(true);
                            break;
                        case 2:
                            aproved.setSelected(true);
                            break;
                        case 3:
                            finish.setSelected(true);
                            break;
                        default:
                            inProcess.setSelected(true);
                            break;
                    }
                }
                inProcess.requestFocus();
                con.Cerrar();
            } catch (ClassNotFoundException | SQLException | InstantiationException | IllegalAccessException ex) {
                Logger.getLogger(ABMServicioTecnico.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_searchOrderKeyReleased

    private void saveChangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveChangesActionPerformed
        //if(inProcess.isSelected()) {
//            serviceProcess = 1;
//        } else if 
        if(aproved.isSelected()) {
            serviceProcess = 2;
            //cast to decimal and not use string
            String senia = JOptionPane.showInputDialog("Seña", "0.00");
            if(senia != null) {
                String senia2 = Utils.formatCurrency(senia.length(), senia);
            }
        } //else if (finish.isSelected()) {
//            serviceProcess = 3;
//        }
    }//GEN-LAST:event_saveChangesActionPerformed
    
    public void initValues() {
        try {
            con = new Conexion();
            String updateOrderNumber = "UPDATE numero_orden_servicio SET numero_orden_servicio = numero_orden_servicio + 1 WHERE id_numero_orden_servicio = 1";
            con.ejecutar(updateOrderNumber);
            String getOrderNumber = "SELECT lpad(numero_orden_servicio, 6, 0) order_number FROM numero_orden_servicio";
            rs = con.Consulta(getOrderNumber);
            while(rs.next()) {
                orderNumber.setText(rs.getString("order_number"));
            }
            String getDeviceType = "SELECT * FROM tipo_articulo";
            rs = con.Consulta(getDeviceType);
            deviceType.insertItemAt("", 0);
            while(rs.next()) {
                deviceType.insertItemAt(rs.getString("descripcion"), rs.getInt("id_tipo_articulo"));
            }
            con.Cerrar();
        } catch (ClassNotFoundException | SQLException | InstantiationException | IllegalAccessException ex) {
            Logger.getLogger(ABMServicioTecnico.class.getName()).log(Level.SEVERE, null, ex);
        }
        inDate.setText(Utils.currentDateFormated());
        customerName.requestFocus();
    }
    public void clearServicesFields() {
        customerName.setText("");
        orderNumber.setText("");
        customerContact.setText("");
        inDate.setText("");
        deviceType.setSelectedIndex(0);
        deviceMarc.setText("");
        deviceModel.setText("");
        problemDetail.setText("");
        inProcess.setSelected(true);                                                    
        aproved.setSelected(false);
        finish.setSelected(false);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox aproved;
    private javax.swing.JButton cancel;
    private javax.swing.JTextField customerContact;
    private javax.swing.JTextField customerName;
    private javax.swing.JTextField deviceMarc;
    private javax.swing.JTextField deviceModel;
    private javax.swing.JTextField deviceSerialNumber;
    private javax.swing.JComboBox<String> deviceType;
    private javax.swing.JCheckBox finish;
    private javax.swing.JTextField inDate;
    private javax.swing.JCheckBox inProcess;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField orderNumber;
    private javax.swing.JTextArea problemDetail;
    private javax.swing.JButton saveAndPrint;
    private javax.swing.JButton saveChanges;
    private javax.swing.JTextField searchOrder;
    // End of variables declaration//GEN-END:variables
}
